1. folder, file
 - lowercase with underscores를 사용한다.
   ex) app_init.dart, flutter_initialize.dart, models/kakao_auth_model.dart, models_temp/magazine_model.dart
 - MVVM에 기반을 두는 파일들은 후미에 attention 메커니즘을 붙인다.
   ex) user_info_model.dart, user_info_view.dart, user_info_screen.dart
   
2. class, variable
 - class name은 upper camel case를 사용한다.
   ex) Login, SchedulResizing
 - variable name은 lower camel case를 사용한다.
   ex) final eventTime, Date eventTime
   
3. image
 - lowercase with underscores를 사용한다.
   ex) logout_button.png
   
4. 폴더는 MVVM, constants, public_widget을 사용한다.
 - MVVM : 패턴용 폴더
 - constants : 앱 구동에 필요한 상수값 집합체
 - public_widget : 앱에서 공통적으로 쓰이는 위젯의 집합체
 
5. 상태관리 메커니즘은 Provider를 따른다.

6. branch
 - branch 모델링은 별도로 사용하지 않는다.
 - 다만 개인 작업 영역은 따로 둔다. 지라 칸반보드 카드넘버에 맞게 branch를 생성하여 작업한다.
   ex) branch name 'ck-66'
 - 사용한 branch는 파기하지 않는다.
 - merge는 슬랙으로 프론트 앱 개발자 전원이 상황을 인지하고 공유된 상태에서 실행한다.
 - '작업 영역' →(merge)→ 'develop' →(code review)→ 'staging' →(launching)→ 'main' 순서로 업데이트한다.

바꾸고 싶은 부분, 빠진 부분은 가감없이 의견 남겨주세요. 여기 하위에.
